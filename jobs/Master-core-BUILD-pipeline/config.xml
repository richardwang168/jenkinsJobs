<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.31">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.4.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.4.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>CLEAN_WORKSPACE</name>
          <description>Clean-Up workspace before building</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>CLEAN_WORKTREES</name>
          <description>Clean-Up related working trees, local branches before building</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.63">
    <script>pipeline {
    agent any
    environment {
        def workspace = pwd()
		def CONFIG = &quot;&quot;
		def autoCancelled = false
        REPO_URI = &quot;git@bitbucket.org:fclweb/iib.git&quot;
		WORKSPACE_HOME = &quot;/var/lib/jenkins/workspace&quot;
		WORKTREES_HOME = &quot;/var/lib/jenkins/worktrees&quot;
		IIB_REPO_HOME = &quot;/var/lib/jenkins/repositories&quot;
		APP_CONFIG_FILE = &quot;${IIB_REPO_HOME}/iib/release-core-0.3.yml&quot;
        BOOTSTRAP_HOME = &quot;${workspace}/../BootStrap_SCM_BUILD_Pipeline/bootstrap-linux&quot;
    }
    parameters {
        booleanParam(defaultValue: true, description: &apos;Clean-Up workspace before building&apos;, name: &apos;CLEAN_WORKSPACE&apos;)
        booleanParam(defaultValue: true, description: &apos;Clean-Up related working trees, local branches before building&apos;, name: &apos;CLEAN_WORKTREES&apos;)
    }
	
    stages {
        stage (&quot;Init IIB master repository&quot;) {
			steps {
				sh &apos;&apos;&apos;
					if [ -d &quot;${IIB_REPO_HOME}/iib&quot; ]; then 
						cd &quot;${IIB_REPO_HOME}/iib&quot;
						if [ $(git rev-parse --is-inside-work-tree) = true ]; then
							echo &quot;IIB git local repository is already there, let&apos;s get it synchronized.&quot;
							git pull
						fi
					else
						echo &quot;IIB git local repository does not exist, clone it from remote BitBucket repository.&quot;
						if [ ! -d &quot;${IIB_REPO_HOME}&quot; ]; then 
							mkdir -p &quot;${IIB_REPO_HOME}&quot;
						fi
						
						cd &quot;${IIB_REPO_HOME}&quot;
						git clone &quot;${REPO_URI}&quot; 
					fi
				&apos;&apos;&apos;
			}
		}
	    stage (&quot;Check configuration file&quot; ) {
			steps {
				script {
					def exists = fileExists(&quot;${APP_CONFIG_FILE}&quot;)
					if (exists) {
						CONFIG = readYaml file: &quot;${APP_CONFIG_FILE}&quot;
						echo &quot;The application is: ${CONFIG.application_name} &quot;
					} else {
						echo &quot;No configuration file ${APP_CONFIG_FILE} was found, please try again after you create and make sure it&apos;s accessable.&quot;
						autoCancelled = true
						error(&apos;Aborting the build.&apos;)
					}
				}
			}
        }

		stage (&quot;Clean-up workspace&quot;) {
		
			when {
				expression { params.CLEAN_WORKSPACE == true }
			}
			
			steps {		
                echo &quot;APP_NAME:${CONFIG.application_name}&quot;
				dir (&quot;${WORKSPACE_HOME}&quot;) {
					sh &quot;&quot;&quot;
						if [ -d &quot;${CONFIG.application_name}&quot; ]; then
							echo &quot;WORKSPACE for ${CONFIG.application_name} exist, delete it.&quot;
							rm -rf ${CONFIG.application_name}
						else
							echo &quot;No workspace for ${CONFIG.application_name} was found.&quot;
						fi
					&quot;&quot;&quot;
				}
			}
		}	

		stage (&quot;Build WORKSPACE&quot;) {
            steps {
                echo &quot;APP_NAME:${CONFIG.application_name}&quot;
				dir (&quot;${WORKSPACE_HOME}&quot;) {
					sh &quot;&quot;&quot;
						if [ -d &quot;${CONFIG.application_name}&quot; ]; then
							echo &quot;WORKSPACE ${CONFIG.application_name} exist, continue using it.&quot;
						else
							echo &quot;Create a new workspace with name ${CONFIG.application_name}&quot;
							mkdir &quot;${CONFIG.application_name}&quot;
						fi
					&quot;&quot;&quot;
				}
			}
		}
		stage (&quot;Clean-up worktrees and local branches&quot;) {
		
			when {
				expression { params.CLEAN_WORKTREES == true }
			}
			
			steps {	
                script {
                    CONFIG.worktrees.each { wt -&gt; 
						wt.each { brName, brAtt -&gt;
							echo &quot;KEY:${brName}&quot;
							echo &quot;BRANCH:${brAtt.local_branch}&quot;
							echo &quot;PATH:${brAtt.local_path}&quot;
							
							dir (&quot;${IIB_REPO_HOME}/iib&quot;) {
								echo &quot;Remove working tree ${brName}&quot;
								sh &quot;&quot;&quot;
									if git worktree list | grep ${WORKTREES_HOME}/${brAtt.local_path} &amp;&gt; /dev/null; then 
										git worktree remove ${WORKTREES_HOME}/${brAtt.local_path}
									fi
									if git branch | grep ${brAtt.local_branch} &amp;&gt; /dev/null; then
										git branch -D ${brAtt.local_branch}
									fi
								&quot;&quot;&quot;
							}
						}
					}
				}            
			}
		}
		
		stage (&quot;Build worktrees and wire with workspace&quot;) {
			steps {				
                script {
                    CONFIG.worktrees.each { wt -&gt; 
						wt.each { brName, brAtt -&gt;
							echo &quot;KEY:${brName}&quot;
							echo &quot;BRANCH:${brAtt.local_branch}&quot;
							echo &quot;PATH:${brAtt.local_path}&quot;
							sh &quot;cd ${WORKTREES_HOME}&quot;
							def exists = fileExists(&quot;${WORKTREES_HOME}/${brAtt.local_path}&quot;)
							if (exists) {
								dir (&quot;${WORKTREES_HOME}/${brAtt.local_path}&quot; ) {
									sh &apos;&apos;&apos;
										if [ $(git rev-parse --is-inside-work-tree) = true ]; then
											echo &quot;Working tree is already there, let&apos;s get it synchronized.&quot;
											git pull
										fi
									&apos;&apos;&apos;	
								}
							} else {
								dir (&quot;${IIB_REPO_HOME}/iib&quot;) {
									echo &quot;Working tree does not exist, add it from remote BitBucket repository.&quot;
									sh &quot;git worktree add -b ${brAtt.local_branch} ${WORKTREES_HOME}/${brAtt.local_path} ${brAtt.remote_branch}&quot;
								}
							}
							sh &quot;cp -prf ${WORKTREES_HOME}/${brAtt.local_path}/* ${WORKSPACE_HOME}/${CONFIG.application_name}&quot;
						} 
                    }
                }
            }            
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>